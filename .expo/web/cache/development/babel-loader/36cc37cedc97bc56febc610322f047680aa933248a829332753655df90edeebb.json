{"ast":null,"code":"import React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { useRoute, useNavigation } from '@react-navigation/native';\nimport NotesBox from \"./NotesBox\";\nimport { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar _Dimensions$get = Dimensions.get('window'),\n  width = _Dimensions$get.width,\n  height = _Dimensions$get.height;\nvar MapScreen = function MapScreen() {\n  var route = useRoute();\n  var imageUri = route.params.imageUri;\n  var navigation = useNavigation();\n  console.log('Received imageUri:', imageUri);\n  return _jsxs(_Fragment, {\n    children: [_jsx(View, {\n      style: styles.imageContainer,\n      children: imageUri ? _jsx(Image, {\n        source: {\n          uri: imageUri\n        },\n        style: styles.image\n      }) : null\n    }), _jsx(Pressable, {\n      style: styles.returnButton,\n      onPress: function onPress() {\n        return navigation.goBack();\n      },\n      children: _jsx(Text, {\n        style: styles.returnButtonText,\n        children: \"Return to map list\"\n      })\n    }), _jsx(NotesBox, {})]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#rgba(105, 63, 27,1)'\n  },\n  image: {\n    width: '100%',\n    height: '100%',\n    resizeMode: 'contain',\n    padding: 10\n  },\n  returnButton: {\n    position: 'absolute',\n    top: 10,\n    left: 10,\n    padding: 10,\n    backgroundColor: '#rgba(245, 245, 220, 1)',\n    borderRadius: 10\n  },\n  returnButtonText: {\n    color: '#000'\n  },\n  pinButton: {\n    backgroundColor: '#rgba(245, 245, 220, 1)',\n    width: 10,\n    height: 10,\n    borderRadius: 5,\n    borderColor: '#rgba(245, 245, 220, 1)'\n  },\n  imageContainer: {\n    width: width - 300,\n    height: height,\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#1B1921',\n    padding: 10\n  }\n});\nexport default MapScreen;","map":{"version":3,"names":["React","View","Image","StyleSheet","Pressable","Text","Dimensions","useRoute","useNavigation","NotesBox","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","_Dimensions$get","get","width","height","MapScreen","route","imageUri","params","navigation","console","log","children","style","styles","imageContainer","source","uri","image","returnButton","onPress","goBack","returnButtonText","create","container","flex","justifyContent","alignItems","backgroundColor","resizeMode","padding","position","top","left","borderRadius","color","pinButton","borderColor"],"sources":["/home/chase/Client/journeysmith/MapScreen.tsx"],"sourcesContent":["\nimport React from 'react';\nimport { View, Image, StyleSheet, Pressable, Text, Dimensions } from 'react-native';\nimport { useRoute, RouteProp, useNavigation, NavigationProp } from '@react-navigation/native';\nimport NotesBox from './NotesBox';\n\ntype RouteParams = {\n    params: {\n        imageUri: string;\n    };\n};\n\ntype RootStackParamList = {\n    Home: undefined;\n    MapList: undefined;\n    MapScreen: { imageUri: string };\n};\n\nconst { width, height } = Dimensions.get('window');\n\n// MapScreen component\nconst MapScreen = () => {\n    const route = useRoute<RouteProp<RouteParams, 'params'>>();\n    const { imageUri } = route.params;\n    const navigation = useNavigation<NavigationProp<RootStackParamList>>();\n\n    console.log('Received imageUri:', imageUri); // For debugging\n\n    return (\n        <>\n            <View style={styles.imageContainer}>\n                {imageUri ? (\n                    <Image source={{ uri: imageUri }} style={styles.image} />\n                ) : null}\n            </View>\n            \n            <Pressable style={styles.returnButton} onPress={() => navigation.goBack()}>\n                <Text style={styles.returnButtonText}>Return to map list</Text>\n            </Pressable>\n            <NotesBox />\n        </>\n    );\n}\n\n// Styles for the map component\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: '#rgba(105, 63, 27,1)',\n    },\n    image: {\n        width: '100%',\n        height: '100%',\n        resizeMode: 'contain',\n        padding: 10,\n    },\n    returnButton: {\n        position: 'absolute',\n        top: 10,\n        left: 10,\n        padding: 10,\n        backgroundColor: '#rgba(245, 245, 220, 1)',\n        borderRadius: 10,\n    },\n    returnButtonText: {\n        color: '#000',\n    },\n    pinButton: {\n        backgroundColor: '#rgba(245, 245, 220, 1)',\n        width: 10,\n        height: 10,\n        borderRadius: 5,\n        borderColor: '#rgba(245, 245, 220, 1)',\n    },\n    imageContainer: {\n        width: width-300,\n        height: height,\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: '#1B1921',\n        padding: 10,\n    },\n});\n\nexport default MapScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}